<!DOCTYPE html>
<html>
	<head>
	<title><%= title %></title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel='stylesheet' href='/stylesheets/style.css' />
	<link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro" rel="stylesheet">	
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
	</head>
	<body>
	<h1 class="input-allowed text-center" id="title"><%= title %> <i class="fa fa-edit"></i></h1>
	<p class="input-allowed text-center" id="subtitle"><%= subtitle %> <i class="fa fa-edit"></i></p>


	<div class="all-criterias-show"></div>
	<div class="all-criterias" id="criterias-pad">
		<% 	for (var i = 0; i < criteria.length; i ++ ){ %>
			<div class="criteria color-<%= i % 5 + 1 %>" id="criteria-<%= i %>" draggable="true"><%= criteria[i] %></div>

		<% } %>
		<div class="criteria new-criteria">+</div>
	</div>	
	<table id="decision-maker" width="100%">
		<thead>
			<tr>
				<th class="disabled" id="choice-heading">Choices</th>
				<% for(var j = 0; j < numCriteria; j++ ){ %>
					<th class="computed-width priority empty" id="priority-<%= j + 1 %>"><p class="percent"></p> </th>
				<% } %>
				<th class="disabled" id="final-heading">Decision</th>
			</tr>
		</thead>
		<tbody>
		<% for (var i =0; i < choices.length; i ++) { %>
			<tr>
				<td class="disabled"><p class="input-allowed choice" id="choice-<%= i %>"><%= choices[i] %> <i class="fa fa-edit"></i></p></td>
				<% for(var j = 0; j < numCriteria; j++ ){ %>
				<td class="result">
					<p class="p-result" data-choice="<%= i %>" data-criteria="<%= j %>" id="result-choice<%= i %>-criteria-<%= j %>">15</p>
					<nav class="rank" data-choice="<%= i %>" data-criteria="<%= j %>">
						<input class="choice" type="radio" name="choice-<%= i %>-criteria-<%= j %>" value="1" id="choice-<%= i %>-criteria-<%= j %>-1">
						<label for="choice-<%= i %>-criteria-<%= j %>-1">1</label>
						<input class="choice" type="radio" name="choice-<%= i %>-criteria-<%= j %>" value="2" id="choice-<%= i %>-criteria-<%= j %>-2" >
						<label for="choice-<%= i %>-criteria-<%= j %>-2">2</label>
						<input class="choice" type="radio" name="choice-<%= i %>-criteria-<%= j %>" value="3" id="choice-<%= i %>-criteria-<%= j %>-3" checked>
						<label for="choice-<%= i %>-criteria-<%= j %>-3">3</label>
						<input class="choice" type="radio" name="choice-<%= i %>-criteria-<%= j %>" value="4" id="choice-<%= i %>-criteria-<%= j %>-4" >
						<label for="choice-<%= i %>-criteria-<%= j %>-4">4</label>
						<input class="choice" type="radio" name="choice-<%= i %>-criteria-<%= j %>" value="5" id="choice-<%= i %>-criteria-<%= j %>-5" >
						<label for="choice-<%= i %>-criteria-<%= j %>-5">5</label>
					</nav>
				</td>
				<% } %>
				<td class="disabled"><p class="decision p-result" id="decision-calc-<%= i %>" data-choice="<%= i %>">15</p></td>
			</tr>
		<% } %>
		</tbody>
	</table>

	<nav class="large-numbers-button">
		<span>Large Numbers are</span>
		<input type="radio" name="large-num" value="good" id="large-good" checked>
		<label for="large-good" class="first">Good</label>
		<input type="radio" name="large-num" value="bad" id="large-bad">
		<label for="large-bad">Bad</label>
	</nav>
	<div class="large-numbers-result">
		<p class="large-result" id="large-result-good">High Ratings</p>
		<p class="large-result hide-opacity" id="large-result-bad">High Costs</p>
	</div>
	<script type="text/javascript" src="/javascripts/jquery.min.js"></script>
	<script type="text/javascript" src="/javascripts/colresizable-1.6.min.js"></script>
	<script>
		$(function(){
			var calculateAllRanks = function() {
				$(".result").each(calculateRank);
			}

			var calculateRank = function(e){
				var width = totalWidth();
				var square = $(this);
				var i = 0;
				while (!square.hasClass('result')  && i < 20) {
					square = square.parent();
					i++;
				}
				
				var valueChecked = parseInt(square.children('.rank').children('input:checked')[0].value);
				square.children('.p-result')[0].innerText = Math.round(square.width() / width * 100 * valueChecked);
				var choice = square.children('.p-result').data('choice');
				var totalRow = 0;
				$('.p-result:not(.decision)[data-choice=' + choice + ']').each(function(){
					totalRow = parseInt(this.innerText) + totalRow;
				})

				$('.decision.p-result[data-choice=' + choice + ']')[0].innerText = totalRow;
			}

			var jsonifyDecison = function(){

			}

			var toggleLargeNumbers = function(){
				$('.large-result').toggleClass('hide-opacity');
			};
			var css2json = function(css) {
			    var s = {};
			    if (!css) return s;
			    if (css instanceof CSSStyleDeclaration) {
			        for (var i in css) {
			        	if (css[i]){
			            if ((css[i]).toLowerCase) {
			                s[(css[i]).toLowerCase()] = (css[css[i]]);
			            }}
			        }
			    } else if (typeof css == "string") {
			        css = css.split("; ");
			        for (var i in css) {
			            var l = css[i].split(": ");
			            s[l[0].toLowerCase()] = (l[1]);
			        }
			    }
			    return s;
			};
			var inputStyle = {
				"-webkit-appearance": "textfield", 
				"user-select": "text", 
				"cursor": "auto", 
				"border-width": "2px", 
				"border-style": "inset", 
				"border-color": "initial", 
				"border-image": "initial", 
				"-webkit-rtl-ordering": "logical", 
				"text-rendering": "auto", 
				"-webkit-writing-mode": "horizontal-tb"
			};

			var allowEdit = function (e){
				while (! e.target.className.includes('input-allowed')) {
					e.target = e.target.parentElement;
				}
				var origTarget = $(e.target);
				var text = origTarget[0].innerText.trim();
				var origCss = window.getComputedStyle(origTarget[0], null);
				var input = origTarget.before('<input class="input-class"/>').siblings('input');
				input
					.val(text)
					.css(css2json(origCss))
					.css(inputStyle)
					.focus(function(){
						$(this).css("outline", "-webkit-focus-ring-color auto 5px");
					})
					.on('keyup', function(e){
					var origTarget = $(e.target).next('.input-allowed');
					if (e.keyCode === 13) {
				        origTarget[0].innerText = $(e.target).val() + ' ';
				        origTarget.append('<i class="fa fa-edit"></i>');
				        $(e.target).remove();
				    }
				});
				// Delete after css applied
				origTarget[0].innerText = '';
			}

			var newcriteria = function(e){
		        var lastId = $('.criteria:not(.new-criteria)').length;
		        var newLastId = 'criteria-' + lastId;
				$('<input class="criteria color-1" id="' + newLastId + '"></>')
					.insertBefore(e.target)
					.on('keyup', function(e){
						if (e.keyCode === 13) {
					        var newDec = $(e.target).val();
					        $('<div class="criteria color-1" id="' + e.target.id + '" draggable="true"></div>').insertBefore(e.target);
				        	$('#'+newLastId).click(cycleColor)
				        		.on("dragstart", dragStart)
				        		[0].innerText = newDec;
					        $(e.target).remove();
					    }
					});
			}

			//finding a class called color-n, cycles to next class color from 1 to numColors
			var cycleColor = function(e) {
				var numColors = <%= numColors %>;
				var element = $(e.currentTarget);
				var colorClass = element.attr("class").match(/color-\d/)[0];
				var currentColor = parseInt(colorClass.substr(colorClass.length - 1));
				if (currentColor === numColors){
					var newColor = 1
				} else {
					var newColor = currentColor + 1;
				}
				element.removeClass(colorClass);
				element.addClass("color-" + String(newColor));
				if (element.parent().attr('class').match(/color-\d/)) {
					element.parent().removeClass(colorClass)
						.addClass("color-" + String(newColor));
				}
			}
			var totalWidth = function(){
				var width = 0;
				$(".computed-width").each(function() {
					width += $(this).width();
				});
				return width;
			};
			// Adds % widths for each column in table with 'computed-width' css classes on headers
			var computeWidths = function(){
				// cannot trust that sum of all columns = width of table due to margin, border, and browser overflow rules
				width = totalWidth();
				$(".computed-width").each(function() {
					$(this).children(".percent").text(String(Math.round($(this).width() / width * 100)) + "%"); 
				});
			};

			//callback for column resizable
			var onSampleResized = function(e){	
				var table = $(e.currentTarget); //reference to the resized table
				computeWidths();
				calculateAllRanks();
			};

			var dragStart = function(event) {
				event.originalEvent.dataTransfer.setData("text", event.target.id);
			}
			var dropEvent = function(event){
				event.preventDefault();
			  	event.stopPropagation();
			  	var mydiv = $(event.target);
			    var data = event.originalEvent.dataTransfer.getData("text");
			    
			    // make sure the target is the outer div - priority or all-criterias
				while (! (mydiv.hasClass('priority') || mydiv.hasClass('all-criterias')) ){
					mydiv = mydiv.parent();
				}

				//priority  = table headers
				//only allow to drop if empty
				if (mydiv.hasClass('priority') && mydiv.hasClass('empty')){
					var dragged = $('#' + data);
					//if being dragged from one column to another
					if (dragged.parent('priority')){
						var colorClass = dragged.attr('class').match(/color-\d/)[0];						
						dragged.parent().addClass('empty')
							.removeClass(colorClass);
					}
					dragged.insertBefore(mydiv.children());
					mydiv.removeClass('empty');
					var colorClass = dragged.attr("class").match(/color-\d/)[0];
					mydiv.addClass(colorClass);
				// if being dragged back to the pool of all criterias
				} else if (mydiv.hasClass('all-criterias')) {
					var dragged = $('#' + data);
					if (dragged.parent().hasClass('priority')) {
						var colorClass = dragged.attr("class").match(/color-\d/)[0];
						dragged.parent().addClass('empty')
							.removeClass(colorClass);
					}
					dragged.insertBefore($('.new-criteria')[0]);
				}
			}
			// initialize column Resizable
			$("#decision-maker").colResizable({
				resizeMode:'fit',
				liveDrag:true,
				postbackSafe:true,
				partialRefresh:true,
				draggingClass:"dragging",
				onResize: onSampleResized,
				disabledColumns: [0],
				onDrag: onSampleResized
			});

			$(document).ready(function(){
				// compute initial column widths
				computeWidths();
				calculateAllRanks();
				// add onclick event to cycle color for all criterias
				$('.criteria').click(cycleColor);
				// make all criterias draggable
				$('.criteria').on("dragstart", dragStart);
				// make all-criterias and priority droppable
				$('.all-criterias, .priority').on("drop", dropEvent);
				$('.all-criterias, .priority').on("dragover", function(event){
					event.preventDefault();
					event.stopPropagation();
				});
				$('.input-allowed').on('click', allowEdit);
				$('.new-criteria').off('click', cycleColor);
				$('.new-criteria').click(newcriteria);
				$('.all-criterias-show').click(function(e){
					$('.all-criterias').toggleClass('hide');
				});
				$('.large-numbers-button label').click(toggleLargeNumbers);
				$('input[type=radio].choice').change(calculateRank);

			})
		});
	</script>
	</body>
</html>
